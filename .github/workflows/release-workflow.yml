name: Release Workflow

# Purpose: Creates and publishes a new release when version is updated.
# Triggers:
# - Workflow dispatch (manual trigger with version choice)
# - When Auto Version Update workflow completes successfully
# Outputs:
# - GitHub release with auto-generated changelog
# - Updated version tags

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Type of version bump to perform (only used for manual trigger)"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
  workflow_run:
    workflows: ["Auto Version Update"] # Name of the workflow that triggers this one
    types:
      - completed

# Add concurrency control to prevent multiple runs for the same ref from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Set to true if you want to cancel ongoing runs for the same group

jobs:
  release:
    runs-on: ubuntu-latest
    # This job should run if the triggering workflow ('Auto Version Update') was successful,
    # OR if the workflow was triggered manually via workflow_dispatch.
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write # Needed to push new tags, commit package.json changes, and create releases
      packages: write # If you are publishing packages to GitHub Packages (not used in this example but good practice if needed)

    steps:
      # Step 1: Download workflow artifacts (only for workflow_run trigger)
      # This step attempts to download an artifact named 'version-info' which should contain
      # the new version details from the 'Auto Version Update' workflow.
      - name: Download workflow artifact
        if: github.event_name == 'workflow_run'
        id: download-artifact
        continue-on-error: true # If artifact download fails, we'll try other methods
        uses: dawidd6/action-download-artifact@v9 # Using a community action to download artifacts
        with:
          workflow: auto-version.yml # Name of the workflow file that produced the artifact
          workflow_conclusion: success # Only download if the producing workflow was successful
          name: version-info # Name of the artifact to download
          path: artifacts # Directory to download the artifact to

      # Step 2: Read artifact containing version info if it exists (only for workflow_run)
      # This step checks if the 'version-info.json' artifact was successfully downloaded
      # and extracts 'new_version' and 'should_release' from it.
      - name: Check for version artifact
        if: github.event_name == 'workflow_run'
        id: check-artifact
        run: |
          if [ -d "artifacts" ] && [ -f "artifacts/version-info.json" ]; then
            echo "Artifact found. Reading version info."
            echo "artifact_exists=true" >> $GITHUB_OUTPUT
            cat artifacts/version-info.json # Display artifact content for debugging
            # Extract new_version and should_release using jq
            NEW_VERSION=$(cat artifacts/version-info.json | jq -r '.new_version')
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            SHOULD_RELEASE=$(cat artifacts/version-info.json | jq -r '.should_release')
            echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          else
            echo "No version artifact found or could not be downloaded. Will check package.json or commits."
            echo "artifact_exists=false" >> $GITHUB_OUTPUT
          fi

      # Step 3: Checkout the repository
      # This step is needed to access the repository's code, like package.json or commit history.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better commit analysis

      # Step 4: Manual version bump (only for workflow_dispatch trigger)
      # If the workflow is triggered manually, this step bumps the version in package.json
      # based on the user's input (patch, minor, major).
      - name: Manual version bump
        if: github.event_name == 'workflow_dispatch'
        id: manual-version
        run: |
          BUMP_TYPE=${{ github.event.inputs.version_bump }}
          echo "Bumping version: $BUMP_TYPE"

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "previous_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Use npm version to update the version in package.json and package-lock.json
          # --no-git-tag-version prevents npm from creating a git tag itself, as we'll do it later.
          npm version $BUMP_TYPE --no-git-tag-version

          # Get the new version from package.json
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_version=v$NEW_VERSION" >> $GITHUB_OUTPUT # For release tag (e.g., v1.2.3)

          # Verify version doesn't already exist as a tag. If it does, increment patch again.
          # This is a safeguard against re-running a manual bump for an already tagged version.
          if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION"; then
            echo "Version v$NEW_VERSION already exists as a tag. Incrementing patch version again to avoid conflict."
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "Adjusted new version: $NEW_VERSION"
            # Update the outputs with the re-adjusted version
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "release_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

          # Commit changes to package.json and package-lock.json
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          # Check if there are changes to commit before attempting to commit
          if ! git diff --staged --quiet; then
            git commit -m "chore(release): bump version to $NEW_VERSION [skip ci]"
            git push
          else
            echo "No changes to package.json or package-lock.json to commit."
          fi

      # Step 5: Check for version bump in recent commits (fallback for workflow_run if artifact is missing)
      # If triggered by 'workflow_run' and the artifact wasn't found, this step tries to determine
      # the version from package.json directly or by looking for "bump version to" in recent commit messages.
      - name: Check for version bump in recent commits or package.json
        if: github.event_name == 'workflow_run' && steps.check-artifact.outputs.artifact_exists != 'true'
        id: check-commits
        run: |
          # Attempt to read version directly from package.json first
          NEW_VERSION_PKG=$(node -p "try { require('./package.json').version } catch (e) { 'unknown' }")
          echo "Current package.json version: $NEW_VERSION_PKG"

          # Try to find the previous version tag
          PREV_VERSION_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$PREV_VERSION_TAG" ]; then
            PREV_VERSION_TAG="v0.0.0"
          fi
          echo "Previous version from tags: $PREV_VERSION_TAG"
          echo "previous_version=$PREV_VERSION_TAG" >> $GITHUB_OUTPUT

          if [ "$NEW_VERSION_PKG" != "unknown" ]; then
            echo "Found version $NEW_VERSION_PKG in package.json."
            echo "new_version=$NEW_VERSION_PKG" >> $GITHUB_OUTPUT
            echo "release_version=v$NEW_VERSION_PKG" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT # Assume if version is found, we should release
          elif git log -3 --pretty=format:"%s" | grep -q "bump version to"; then
            # Fallback: Check recent commits for version bump messages
            echo "Found 'bump version to' commit in recent history."
            # Extract version number from the latest commit message matching the pattern
            BUMP_VERSION=$(git log -1 --pretty=format:"%s" | grep -oP "bump version to \K[0-9.]+" || echo "unknown")
            
            if [ "$BUMP_VERSION" != "unknown" ]; then
              echo "Extracted version $BUMP_VERSION from commit message."
              echo "new_version=$BUMP_VERSION" >> $GITHUB_OUTPUT
              echo "release_version=v$BUMP_VERSION" >> $GITHUB_OUTPUT
            else
              # If extraction fails, default to package.json version (even if it was 'unknown' before, try again or set as unknown)
              echo "Could not extract version from commit. Using package.json version as fallback."
              echo "new_version=$NEW_VERSION_PKG" >> $GITHUB_OUTPUT # This might be 'unknown'
              echo "release_version=v$NEW_VERSION_PKG" >> $GITHUB_OUTPUT
            fi
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "No version bump commit found in recent history and package.json version is unknown or not found."
            echo "new_version=unknown" >> $GITHUB_OUTPUT
            echo "release_version=unknown" >> $GITHUB_OUTPUT
            echo "previous_version=unknown" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      # Step 6: Determine the version to release and if a release should be made
      # This step consolidates version information from the previous steps (manual, artifact, commits)
      # and sets final 'version', 'release_version', and 'should_release' outputs.
      - name: Setup release variables
        id: setup-release
        run: |
          NEW_VERSION=""
          RELEASE_VERSION=""
          PREVIOUS_VERSION=""
          SHOULD_RELEASE="false"

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual trigger, use version from the manual-version step
            NEW_VERSION="${{ steps.manual-version.outputs.version }}"
            RELEASE_VERSION="${{ steps.manual-version.outputs.release_version }}"
            PREVIOUS_VERSION="${{ steps.manual-version.outputs.previous_version }}"
            SHOULD_RELEASE="true"
            echo "Source: Manual trigger (workflow_dispatch)"
          elif [ "${{ steps.check-artifact.outputs.artifact_exists }}" == "true" ]; then
            # If artifact exists, use version from the artifact
            NEW_VERSION="${{ steps.check-artifact.outputs.new_version }}"
            RELEASE_VERSION="v$NEW_VERSION"
            SHOULD_RELEASE="${{ steps.check-artifact.outputs.should_release }}"
            # Try to get previous version from tags
            PREV_TAG=$(git tag --sort=-creatordate | grep -v "v$NEW_VERSION" | head -n 1)
            if [ -n "$PREV_TAG" ]; then
              PREVIOUS_VERSION="$PREV_TAG"
            else
              PREVIOUS_VERSION="v0.0.0"
            fi
            echo "Source: Version artifact"
          elif [ "${{ steps.check-commits.outputs.should_release }}" == "true" ]; then
            # If no artifact but commits check yielded a version, use that
            NEW_VERSION="${{ steps.check-commits.outputs.new_version }}"
            RELEASE_VERSION="${{ steps.check-commits.outputs.release_version }}"
            PREVIOUS_VERSION="${{ steps.check-commits.outputs.previous_version }}"
            SHOULD_RELEASE="true" # If check-commits decided to release, honor it
            echo "Source: Commit history / package.json fallback"
          else
            echo "No version information found from any source. No release will be made."
          fi

          # Validate the determined NEW_VERSION
          if [ -z "$NEW_VERSION" ] || [ "$NEW_VERSION" == "unknown" ]; then
            echo "Could not determine a valid version. Cannot release."
            SHOULD_RELEASE="false"
            # Set outputs even if not releasing to avoid errors in later steps' conditions
            echo "version=unknown" >> $GITHUB_OUTPUT
            echo "release_version=unknown" >> $GITHUB_OUTPUT
            echo "previous_version=unknown" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Version to release: $NEW_VERSION"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT # e.g. v1.2.3
            echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
            echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          fi

          if [ "$SHOULD_RELEASE" == "true" ]; then
            echo "Preparing to create release for version $RELEASE_VERSION (comparing with $PREVIOUS_VERSION)"
          else
            echo "Skipping release creation as should_release is false or version is unknown."
          fi

      # Step 7: Generate release notes from commits
      - name: Generate Release Notes
        if: steps.setup-release.outputs.should_release == 'true' && steps.setup-release.outputs.version != 'unknown'
        id: generate-notes
        shell: bash
        run: |
          VERSION_TAG="${{ steps.setup-release.outputs.release_version }}"
          PREV_VERSION="${{ steps.setup-release.outputs.previous_version }}"

          echo "Generating release notes for $VERSION_TAG (comparing with $PREV_VERSION)"

          # Extract relevant commits between previous tag and current
          echo "Finding commits between $PREV_VERSION and HEAD..."
          COMMIT_LIST=$(git log --pretty=format:"%h %s" $PREV_VERSION..HEAD | grep -v "Merge\|bump version\|Build and version\|\[skip ci\]" || echo "")

          # Process commits into categories
          FEATURES=$(echo "$COMMIT_LIST" | grep -i "feat\|feature\|add" || echo "")
          FIXES=$(echo "$COMMIT_LIST" | grep -i "fix\|bug\|issue\|resolve" || echo "")
          REFACTORS=$(echo "$COMMIT_LIST" | grep -i "refactor\|improve\|enhancement\|perf\|performance" || echo "")
          DOCS=$(echo "$COMMIT_LIST" | grep -i "doc\|docs\|documentation" || echo "")
          CHORES=$(echo "$COMMIT_LIST" | grep -i "chore\|ci\|build\|test" || echo "")
          OTHER=$(echo "$COMMIT_LIST" | grep -v -i "feat\|feature\|add\|fix\|bug\|issue\|resolve\|refactor\|improve\|enhancement\|perf\|performance\|doc\|docs\|documentation\|chore\|ci\|build\|test" || echo "")

          # Start building release notes with proper Markdown formatting

          NOTES="# 🚀 Release $VERSION_TAG\n\n"
          # Add overview section
          NOTES="$NOTES## Overview\n"
          NOTES="$NOTESThis release includes updates to the YML Change Webhook Trigger GitHub Action with improvements to reliability and functionality for detecting YML changes and triggering webhooks.\n\n"
          CHANGES_ADDED=false

          # Process feature changes
          if [ -n "$FEATURES" ]; then
            NOTES="$NOTES## ✨ New Features\n"
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                COMMIT_MSG=$(echo "$line" | sed -E 's/^[a-f0-9]+ (feat\(.*\): |feature: |feat: |add: )?/- /')
                NOTES="$NOTES$COMMIT_MSG\n"
              fi
            done <<< "$FEATURES"
            NOTES="$NOTES\n"
            CHANGES_ADDED=true
          fi

          # Process bug fixes
          if [ -n "$FIXES" ]; then
            NOTES="$NOTES## 🐛 Bug Fixes\n"
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                COMMIT_MSG=$(echo "$line" | sed -E 's/^[a-f0-9]+ (fix\(.*\): |bug: |fix: |issue: )?/- /')
                NOTES="$NOTES$COMMIT_MSG\n"
              fi
            done <<< "$FIXES"
            NOTES="$NOTES\n"
            CHANGES_ADDED=true
          fi

          # Process improvements and refactors
          if [ -n "$REFACTORS" ]; then
            NOTES="$NOTES## 🔧 Improvements\n"
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                COMMIT_MSG=$(echo "$line" | sed -E 's/^[a-f0-9]+ (refactor\(.*\): |improve: |perf: |enhancement: )?/- /')
                NOTES="$NOTES$COMMIT_MSG\n"
              fi
            done <<< "$REFACTORS"
            NOTES="$NOTES\n"
            CHANGES_ADDED=true
          fi

          # Process documentation updates
          if [ -n "$DOCS" ]; then
            NOTES="$NOTES## 📝 Documentation\n"
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                COMMIT_MSG=$(echo "$line" | sed -E 's/^[a-f0-9]+ (doc\(.*\): |docs: |documentation: )?/- /')
                NOTES="$NOTES$COMMIT_MSG\n"
              fi
            done <<< "$DOCS"
            NOTES="$NOTES\n"
            CHANGES_ADDED=true
          fi

          # Process other changes
          if [ -n "$OTHER" ] || [ -n "$CHORES" ]; then
            NOTES="$NOTES## 🔄 Other Changes\n"
            if [ -n "$CHORES" ]; then
              while IFS= read -r line; do
                if [ -n "$line" ]; then
                  COMMIT_MSG=$(echo "$line" | sed -E 's/^[a-f0-9]+ (chore\(.*\): |ci: |build: |test: )?/- /')
                  NOTES="$NOTES$COMMIT_MSG\n"
                fi
              done <<< "$CHORES"
            fi
            if [ -n "$OTHER" ]; then
              while IFS= read -r line; do
                if [ -n "$line" ]; then
                  COMMIT_MSG=$(echo "$line" | sed -E 's/^[a-f0-9]+ /- /')
                  NOTES="$NOTES$COMMIT_MSG\n"
                fi
              done <<< "$OTHER"
            fi
            NOTES="$NOTES\n"
            CHANGES_ADDED=true
          fi

          # If no specific changes found, add a generic entry
          if [ "$CHANGES_ADDED" = false ]; then
            NOTES="$NOTES## 🔧 What's Changed\n- General improvements and updates\n\n"
          fi

          # Add resources section
          NOTES="$NOTES## 📚 Resources\n- [Full Changelog](https://github.com/${GITHUB_REPOSITORY}/compare/$PREV_VERSION...$VERSION_TAG)\n- [Commit History](https://github.com/${GITHUB_REPOSITORY}/commits/$VERSION_TAG)\n- [Report Issues](https://github.com/${GITHUB_REPOSITORY}/issues)\n\n"
          # Add usage section
          NOTES="$NOTES## 📋 Usage\nAdd this action to your GitHub workflows by referencing:\n\`\`\`yaml\n- uses: ${GITHUB_REPOSITORY}@$VERSION_TAG\n\`\`\`\n\n"
          # Add footer
          NOTES="$NOTES---\n✨ *This release was automatically generated through our CI/CD pipeline as part of our commitment to continuous improvement.*"

          # Save notes for later use
          echo "$NOTES" > release-notes.md

          # Set output for later use
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 8: Setup Node.js environment
      - name: Setup Node.js
        if: steps.setup-release.outputs.should_release == 'true' && steps.setup-release.outputs.version != 'unknown'
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Specify Node.js version
          cache: "npm" # Cache npm dependencies

      # Step 9: Install dependencies
      - name: Install dependencies
        if: steps.setup-release.outputs.should_release == 'true' && steps.setup-release.outputs.version != 'unknown'
        run: npm ci # Use 'ci' for cleaner installs in CI environments

      # Step 10: Run tests
      # Ensures the code is in a good state before building and releasing.
      - name: Run tests
        if: steps.setup-release.outputs.should_release == 'true' && steps.setup-release.outputs.version != 'unknown'
        run: NODE_ENV=test npx jest --config jest.config.js --passWithNoTests
        shell: bash

      # Step 11: Build the action (e.g., using ncc)
      # This step compiles the action code into a 'dist' directory.
      - name: Build action
        if: steps.setup-release.outputs.should_release == 'true' && steps.setup-release.outputs.version != 'unknown'
        run: npm run build # Assumes 'build' script is defined in package.json (e.g., "build": "ncc build index.js -o dist")

      # Step 12: Commit built files (dist directory)
      # The 'dist' directory is often in .gitignore, so '-f' (force) is used to add it.
      # This ensures the compiled action code is part of the commit that the release tag will point to.
      - name: Commit built files
        if: steps.setup-release.outputs.should_release == 'true' && steps.setup-release.outputs.version != 'unknown'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -f dist/ # Force add the dist directory
          # Check if there are changes to commit before attempting to commit
          if git diff --staged --quiet; then
            echo "No changes to commit in dist/ directory."
          else
            git commit -m "ci: Build dist files for ${{ steps.setup-release.outputs.release_version }} [skip ci]"
            git push
          fi

      # Step 13: Create or Update GitHub Release with our pretty release notes
      - name: Create or Update Release
        if: steps.setup-release.outputs.should_release == 'true' && steps.setup-release.outputs.version != 'unknown'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically available
          RELEASE_TAG: ${{ steps.setup-release.outputs.release_version }} # e.g., v1.2.3
        run: |
          VERSION_TAG="${{ steps.setup-release.outputs.release_version }}" # e.g. v1.2.3

          echo "Attempting to create or update release for tag: $VERSION_TAG"

          # Ensure the local tag exists and points to the current HEAD
          git tag -f $VERSION_TAG HEAD # Force update local tag to current commit
          echo "Updated local tag $VERSION_TAG to point to HEAD."

          # Push the tag (and force it if it exists on remote to update it)
          echo "Pushing tag $VERSION_TAG to remote. Forcing update if it exists."
          git push origin $VERSION_TAG --force

          # Use the generated release notes
          RELEASE_NOTES=$(cat release-notes.md)

          # Check if the release already exists using GitHub CLI
          if gh release view "$VERSION_TAG" --repo "${{ github.repository }}" &> /dev/null; then
            echo "Release $VERSION_TAG already exists. Updating it."
            # Update the existing release
            gh release edit "$VERSION_TAG" \
              --title "Release $VERSION_TAG" \
              --notes "$RELEASE_NOTES" \
              --draft=false \
              --repo "${GITHUB_REPOSITORY}"
            
            echo "Release $VERSION_TAG updated successfully."
          else
            echo "Creating new release $VERSION_TAG"
            # Create a new release
            gh release create "$VERSION_TAG" \
              --title "Release $VERSION_TAG" \
              --notes "$RELEASE_NOTES" \
              --draft=false \
              --repo "${GITHUB_REPOSITORY}"
            
            echo "Release $VERSION_TAG created successfully."
          fi

      # Step 14: Update major/minor version tags (e.g., v1, v1.2)
      # This makes it easy for users to refer to the latest major or major.minor version.
      - name: Update version tags (major, major.minor)
        if: steps.setup-release.outputs.should_release == 'true' && steps.setup-release.outputs.version != 'unknown'
        run: |
          VERSION_WITH_V_PREFIX="${{ steps.setup-release.outputs.release_version }}" # e.g., v1.2.3
          # Remove 'v' prefix to get just the number
          VERSION_NUM=${VERSION_WITH_V_PREFIX#v} # e.g., 1.2.3

          # Extract version components (MAJOR, MINOR)
          MAJOR=$(echo $VERSION_NUM | cut -d '.' -f 1)
          MINOR=$(echo $VERSION_NUM | cut -d '.' -f 2)

          # Only proceed if we have a 'v' prefix, indicating a standard semver tag
          if [[ "$VERSION_WITH_V_PREFIX" == v* ]]; then
            echo "Creating/updating floating version tags (e.g., v1, v1.2)"
            
            # Major version tag (e.g., v1)
            MAJOR_TAG="v$MAJOR"
            echo "Updating tag $MAJOR_TAG to point to $VERSION_WITH_V_PREFIX"
            git tag -f $MAJOR_TAG $VERSION_WITH_V_PREFIX # Create/update local tag to point to the full version tag
            git push origin $MAJOR_TAG --force # Push the major tag, force to update if it exists
            echo "Major version tag $MAJOR_TAG now points to release $VERSION_WITH_V_PREFIX"
            
            # Major.Minor version tag (e.g., v1.0)
            MAJOR_MINOR_TAG="v$MAJOR.$MINOR"
            echo "Updating tag $MAJOR_MINOR_TAG to point to $VERSION_WITH_V_PREFIX"
            git tag -f $MAJOR_MINOR_TAG $VERSION_WITH_V_PREFIX # Create/update local tag
            git push origin $MAJOR_MINOR_TAG --force # Push the major.minor tag, force to update
            echo "Major.Minor version tag $MAJOR_MINOR_TAG now points to release $VERSION_WITH_V_PREFIX"
          else
            echo "Skipping floating tags as the release version does not start with 'v'."
          fi
